/*
  Задание: подключить редакс к проекту.

  Материалы:
  Redux dev tools - https://github.com/zalmoxisus/redux-devtools-extension
  Redux docs - https://redux.js.org/ https://react-redux.js.org/
  Reducs docs in russian - https://rajdee.gitbooks.io/redux-in-russian/content/
  react docs in russian - https://learn-reactjs.ru/home
  http://prgssr.ru/development/pogruzhenie-v-react-router.html
  https://learn-reactjs.ru/home
  https://habrahabr.ru/post/329996/
  https://habrahabr.ru/post/319134/
  https://habrahabr.ru/post/319270/


  Подытожим все задания:
  Всё то, что задавалось на прошлых занятиях, будет проверяться, т.е.
  дерево компонентов, реакт роутер и навигация по ссылкам, реакт+редакс,
  авторизация пользователя (любого из вашего бэкенда или вновь зареганного) в системе по логину (пароль у всех qwerty),
  регистрация, переход в ЛК и возможность поменять свою личную инфу,
  возможность добавления/удаления/редактирования статей и установки лайков статьям всем залогиненным пользователям,
  добавления комментов к статьям.
  Измененные/добавленные пользователем данные не должны пропадать при навигации по сайту
  Если юзер вошел на сайт, очевидно, что кнопки войти/регистрация должны отсутстовать, вместо них в хедере появляется
  фраза "Привет, %USERNAME%!" и рядом кнопка выйти, по которой происходит выход.
  Должны быть сообщения об ошибках, чтобы посетитель знал, что делает не так (неверный логин/пароль, пользователь с таким
  логином уже существует, и т.д. по вашему вкусу, т.е. это уже должен отдавать ваш бэкенд)
  Постараться сделать так, чтобы при обновлении страницы пользователя не выкидывало (разлогиневало) с сайта,
  т.е. придется погуглить и подумать, как сохранять токен авторизации, который отдает вам бэкенд
  Если туго с фантазией, можете использовать готовые компоненты из пакета react-bootstrap

  Бэкенд должен быть на Node.js обязательно при использовании фреймворка Hapi.js и сопутствующих плагинов
  (все они были разобраны нами на занятиях). В качестве БД используется MongoDB и работа с ней через
  библиотеку Mongoose. Пользовательская авторизация типа Bearer.

  Также в корне проекта положите файл README.md, внутри которого опишите свой функционал, что у вас работает, как этим пользоваться и т.д.
  У бэкенда своя папка backend, у фронтенда своя папка frontend. Они не пересекаются. В каждом из двух проектов
  реализовать npm-команду start, при выполнении которой происходит сборка и запуск фронтенда и подключение к БД и запуск сервера

  Для получения сертификатов по продвинутому курсу JavaScript необходимо выполнить итоговый проект,
  сдача будет происходить на гитхабе. Разработку вести нужно в ветке develop, и все файлы должны быть там. Как только завершите,
  создаете в своем репозитории Pull Request в ветку master из ветки develop и добавьте меня в ревьюеры (предварительно
  добавив в настройках меня (https://github.com/dm-khanin, dm.khanin@gmail.com) в соучастники вашего проекта).
  Там я смогу отревьюить ваш проект и поставить вам оценку за курс.
  Не забудьте в профиле гитхаба указать свои реальные имя и фамилию, чтобы я понимал, чья это работа (потом сможете убрать)

  Крайний срок сдачи работ -- 23:59 28 июня 2020 г.

 */
